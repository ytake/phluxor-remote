<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: message.proto

namespace Phluxor\Remote\ProtoBuf;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>remote.RemoteMessage</code>
 */
class RemoteMessage extends \Google\Protobuf\Internal\Message
{
    protected $message_type;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Phluxor\Remote\ProtoBuf\MessageBatch $message_batch
     *     @type \Phluxor\Remote\ProtoBuf\ConnectRequest $connect_request
     *     @type \Phluxor\Remote\ProtoBuf\ConnectResponse $connect_response
     *     @type \Phluxor\Remote\ProtoBuf\DisconnectRequest $disconnect_request
     * }
     */
    public function __construct($data = NULL) {
        \Phluxor\Remote\Metadata\ProtoBuf\Message::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>.remote.MessageBatch message_batch = 1;</code>
     * @return \Phluxor\Remote\ProtoBuf\MessageBatch|null
     */
    public function getMessageBatch()
    {
        return $this->readOneof(1);
    }

    public function hasMessageBatch()
    {
        return $this->hasOneof(1);
    }

    /**
     * Generated from protobuf field <code>.remote.MessageBatch message_batch = 1;</code>
     * @param \Phluxor\Remote\ProtoBuf\MessageBatch $var
     * @return $this
     */
    public function setMessageBatch($var)
    {
        GPBUtil::checkMessage($var, \Phluxor\Remote\ProtoBuf\MessageBatch::class);
        $this->writeOneof(1, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.remote.ConnectRequest connect_request = 2;</code>
     * @return \Phluxor\Remote\ProtoBuf\ConnectRequest|null
     */
    public function getConnectRequest()
    {
        return $this->readOneof(2);
    }

    public function hasConnectRequest()
    {
        return $this->hasOneof(2);
    }

    /**
     * Generated from protobuf field <code>.remote.ConnectRequest connect_request = 2;</code>
     * @param \Phluxor\Remote\ProtoBuf\ConnectRequest $var
     * @return $this
     */
    public function setConnectRequest($var)
    {
        GPBUtil::checkMessage($var, \Phluxor\Remote\ProtoBuf\ConnectRequest::class);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.remote.ConnectResponse connect_response = 3;</code>
     * @return \Phluxor\Remote\ProtoBuf\ConnectResponse|null
     */
    public function getConnectResponse()
    {
        return $this->readOneof(3);
    }

    public function hasConnectResponse()
    {
        return $this->hasOneof(3);
    }

    /**
     * Generated from protobuf field <code>.remote.ConnectResponse connect_response = 3;</code>
     * @param \Phluxor\Remote\ProtoBuf\ConnectResponse $var
     * @return $this
     */
    public function setConnectResponse($var)
    {
        GPBUtil::checkMessage($var, \Phluxor\Remote\ProtoBuf\ConnectResponse::class);
        $this->writeOneof(3, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.remote.DisconnectRequest disconnect_request = 4;</code>
     * @return \Phluxor\Remote\ProtoBuf\DisconnectRequest|null
     */
    public function getDisconnectRequest()
    {
        return $this->readOneof(4);
    }

    public function hasDisconnectRequest()
    {
        return $this->hasOneof(4);
    }

    /**
     * Generated from protobuf field <code>.remote.DisconnectRequest disconnect_request = 4;</code>
     * @param \Phluxor\Remote\ProtoBuf\DisconnectRequest $var
     * @return $this
     */
    public function setDisconnectRequest($var)
    {
        GPBUtil::checkMessage($var, \Phluxor\Remote\ProtoBuf\DisconnectRequest::class);
        $this->writeOneof(4, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getMessageType()
    {
        return $this->whichOneof("message_type");
    }

}

